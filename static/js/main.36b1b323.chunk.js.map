{"version":3,"sources":["components/Header.js","components/TradeForm.js","components/Layout.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","paddingTop","paddingBottom","color","background","textAlign","Header","style","margin","width","formStyle","TradeForm","props","handleChange","event","name","target","value","setState","handleSubmit","preventDefault","onSubmit","id","shortid","generate","strikePrice","parseFloat","state","buySell","tradeType","price","this","Form","Group","controlId","Label","Control","type","onChange","Row","Col","as","Button","variant","Component","calculateProfitLoss","underlyingPrice","trades","profitLoss","entries","leg","_strikePrice","_premium","_profitLoss","Math","max","deleteStyle","cursor","Layout","addTrades","addTrade","_strikePrices","strikePrices","sort","a","b","handleDelete","deleteTrade","filter","trade","profitLoss_list","strikePrice_list","lastVal","length","inf_price_val","max_strikeprice_val","shift","max_profit","Number","POSITIVE_INFINITY","apply","max_loss","warning_flag","NEGATIVE_INFINITY","min","max_profit_str","max_loss_str","abs","toFixed","console","log","Container","minHeight","Table","map","key","onClick","footerStyle","position","bottom","Footer","sm","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36b1b323.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst headerStyle={\n    paddingTop: \"30px\",\n    paddingBottom: \"30px\",\n    color: \"#fff\",\n    background: \"#2e2e2e\",\n    textAlign: \"left\",\n}\n\nfunction Header() {\n    return (\n    <div style={headerStyle}>\n        <div style={{margin: '30px'}}>\n            <h2>Option Warning</h2>\n            <div style={{width:'300px'}}>\n                This website will calculate max profit and max loss for your option tradings.\n            </div>\n        </div>\n        \n    </div>\n    );\n  }\n  \nexport default Header;","import React, { Component } from 'react'\nimport { Button, Form, Col} from 'react-bootstrap';\nimport shortid from \"shortid\"\n\nconst formStyle={\n    textAlign: 'left',\n    margin: '10px'\n}\n\nexport default class TradeForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            id: '',\n            strikePrice: '',\n            buySell: '',\n            tradeType: '',\n            price: ''\n        };\n    }\n\n    handleChange = event =>{\n        const name = event.target.name;\n        var value = event.target.value\n        this.setState({\n            [name]:value\n        })\n    }\n\n\thandleSubmit = event => {\n\t\t// alert(`${this.state.strikePrice} ${this.state.tradeType} ${this.state.price}`)\n        event.preventDefault()\n        this.props.onSubmit({\n            id:shortid.generate(),\n            strikePrice: parseFloat(this.state.strikePrice),\n            buySell: this.state.buySell,\n            tradeType: this.state.tradeType,\n            price: parseFloat(this.state.price)\n        });\n        this.setState({\n            strikePrice: '',\n            buySell: '',\n            tradeType: '',\n            price: ''\n        });\n\t};\n\n\trender() {\n\t\tconst { strikePrice, buySell, tradeType, price} = this.state\n\t\treturn (\n                <Form onSubmit={this.handleSubmit} style={formStyle}>\n                    <Form.Group controlId=\"formGridStrikePrice\">\n                    <Form.Label>Strike Price</Form.Label>\n                    <Form.Control type='text'\n                                name='strikePrice'\n                                value={strikePrice}\n                                onChange={this.handleChange}/>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formGridTradeType\">\n                    <Form.Label>Trade Type</Form.Label>\n                    <Form.Row>\n                        <Col>\n                        <Form.Control as=\"select\" name='buySell' value={buySell} onChange={this.handleChange}>\n                            <option>Choose</option>\n                            <option value=\"Buy\">Buy</option>\n                            <option value='Sell'>Sell</option>\n                        </Form.Control>\n                        </Col>\n                        <Col>\n                        <Form.Control as=\"select\" name='tradeType' value={tradeType} onChange={this.handleChange}>\n                            <option>Choose</option>\n                            <option value=\"Call\">Call</option>\n                            <option value='Put'>Put</option>\n                        </Form.Control>\n                        </Col>\n                        \n                    </Form.Row>\n                    \n                    </Form.Group>\n\n                    <Form.Group controlId=\"formGridPrice\">\n                    <Form.Label>Price</Form.Label>\n                    <Form.Control type='text'\n                                name='price'\n                                value={price}\n                                onChange={this.handleChange}/>\n                    </Form.Group>\n                    <div>Contract size: 100</div><br />\n                    <Button variant=\"primary\" type=\"submit\">Add</Button>          \n                </Form>\n\t\t)\n\t}\n}","import React, { Component } from 'react'\nimport { Container, Row, Col, Table } from 'react-bootstrap';\nimport TradeForm from './TradeForm'\n\nconst position = 1;\nconst contract_size = 100;\n\nfunction calculateProfitLoss(underlyingPrice, trades) {\n    var profitLoss = 0\n    for (const [, leg] of trades.entries()) {\n        var _strikePrice = leg.strikePrice;\n        var _premium = leg.price;\n\n        // calculate profit or loss\n        var _profitLoss = 0;\n        if (leg.tradeType === 'Call') {\n            _profitLoss = Math.max((underlyingPrice - _strikePrice), 0) - _premium;\n        } else if (leg.tradeType === 'Put') {\n            _profitLoss = Math.max((_strikePrice - underlyingPrice), 0) - _premium;\n        }\n\n        // calculate long short position\n        if (leg.buySell === \"Sell\") {\n            _profitLoss = -_profitLoss;\n        }\n        profitLoss = profitLoss + _profitLoss * position * contract_size;\n    }\n    return profitLoss;\n}\n\nconst deleteStyle={\n    cursor: \"pointer\"\n}\n\nexport default class Layout extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            trades: [],\n            strikePrices: [0]\n        };\n    }\n\n    addTrades = addTrade => {\n        var _strikePrices = [addTrade.strikePrice, ...this.state.strikePrices]\n        _strikePrices.sort(function (a, b) { return a - b });\n        this.setState(state => ({\n            trades: [addTrade, ...state.trades],\n            strikePrices: _strikePrices\n        }));\n    }\n    handleDelete = deleteTrade => {\n        this.setState(state => ({\n            trades: state.trades.filter(trade => trade.id !== deleteTrade.id),\n            strikePrices: state.strikePrices.filter(strikePrice => strikePrice !== deleteTrade.strikePrice)\n        }));\n    }\n    calculateProfitLoss = leg => {\n\n    }\n\n    render() {\n        let trades = this.state.trades;\n        var profitLoss_list = [];\n        var strikePrice_list = this.state.strikePrices;\n        var lastVal = strikePrice_list[strikePrice_list.length - 1] + 1;\n        strikePrice_list = [...strikePrice_list, lastVal];\n        for (const [, underlyingPrice] of strikePrice_list.entries()) {\n            var profitLoss = calculateProfitLoss(underlyingPrice, trades);\n            profitLoss_list = [profitLoss, ...profitLoss_list];\n        }\n        var inf_price_val = profitLoss_list[0];\n        var max_strikeprice_val = profitLoss_list[1];\n        profitLoss_list.shift();\n        // max profit\n        var max_profit = 0;\n        if (inf_price_val > max_strikeprice_val) {\n            max_profit = Number.POSITIVE_INFINITY;\n        } else {\n            max_profit = Math.max.apply(null, profitLoss_list);\n        }\n        // max loss\n        var max_loss = 0;\n        var warning_flag = false;\n        if (inf_price_val < max_strikeprice_val) {\n            max_loss = Number.NEGATIVE_INFINITY;\n            warning_flag = true;\n        } else {\n            max_loss = Math.min.apply(null, profitLoss_list);\n            if (max_loss < -10000) {\n                warning_flag = true;\n            }\n        }\n        var max_profit_str = \"\";\n        var max_loss_str = \"\";\n        if (max_profit<0){\n            max_profit_str = '-$'+Math.abs(max_profit).toFixed(2);\n        }else{\n            max_profit_str = '$'+max_profit.toFixed(2);\n        }\n        if(max_loss<0){\n            max_loss_str = '-$'+Math.abs(max_loss).toFixed(2);\n        }else{\n            max_loss_str = '$'+max_loss.toFixed(2);\n        }\n        console.log(strikePrice_list)\n\n        return (\n            <Container>\n                <Row style={{margin:'50px', minHeight: '480px'}}>\n                    <Col>\n                        <TradeForm onSubmit={this.addTrades} />\n                    </Col>\n                    <Col>\n                        <Table>\n                            <tbody>\n                                {trades.map(trade => (\n                                    <tr key={trade.id}>\n                                        <td>${trade.strikePrice} {trade.tradeType}</td>\n                                        <td>\n                                            {trade.buySell === 'Sell' ? '-$' + trade.price.toFixed(2) : '$' + trade.price.toFixed(2)}\n                                        </td>\n                                        <td style={deleteStyle} onClick={() => this.handleDelete(trade)}>x</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                        \n\n                        <Table style={{ textAlign: 'left' }}>\n                            <tbody>\n                                <tr>\n                                    <td>Max profit:</td>\n                                    <td>{max_profit_str}</td>\n                                </tr>\n                                <tr>\n                                    <td>Max loss:</td>\n                                    <td>{max_loss_str}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                        {warning_flag && <div>Warning: system suggest not to trade. Exceed max loss of $10000.</div>}\n\n                    </Col>\n                </Row>\n            </Container>\n\n        )\n    }\n\n}\n","import React, { Component } from 'react'\nimport {Container, Row, Col} from 'react-bootstrap'\n\nconst footerStyle={\n    paddingTop: \"30px\",\n    paddingBottom: \"30px\",\n    color: \"#fff\",\n    background: \"#2e2e2e\",\n    textAlign: \"left\",\n    position:\"absolute\",\n    bottom:'0',\n    width: '100%'\n}\n\n\nfunction Footer() {\n    return (\n        <footer style={footerStyle}>\n        <Container>\n            <Row>\n                <Col sm=\"6\">Copyright © 2020 Tianning Li. All Rights Reserved.</Col>\n            </Row>\n        </Container>\n      </footer>          \n    );\n  }\n  \nexport default Footer;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from './components/Header'\nimport Layout from './components/Layout'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Header />\n      <Layout />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}